// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    // registers 
    
    Not(in = instruction[15], out = ALoad);
    Mux16(b = instruction, a = aluOut, sel = ALoad, out = aIn);
    Or(a = instruction[5], b = ALoad, out = loadA);
    ARegister(in = aIn, load = loadA, out = aReg);
    DRegister(in = aluOut, load = instruction[4], out = dReg);

    // instruction counter
    Not(in = ng, out = notNg);
    Not(in = zr, out = notZr);
    And(a = zr, b = instruction[1], out = and1);
    And(a = ng, b = instruction[2], out = and2);
    And(a = notNg, b = notZr, out = andA);
    And(a = andA, b = instruction[0], out = and3);
    Or(a = and1, b = and2, out = or1);
    Or(a = or1, b = and3, out = pcLoad);
    And(a = pcLoad, b = instruction[15], out = pcLoadFinal);
    Not(in = pcLoadFinal, out = pcInc);
    PC(in = aReg, load = pcLoadFinal, inc = pcInc, reset = reset, out[0..14] = pc);

    // alu and input + output selection 
    Mux16(a = aReg, b = inM, sel = instruction[12], out = aluY);
    ALU(x=dReg ,y=aluY ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] , ny=instruction[8],f=instruction[7],no=instruction[6], out=aluOut,zr=zr, ng=ng);

    Mux16(a = false, b = aluOut, sel = writeMem, out = outM);
    And(a = instruction[15], b = instruction[3], out = writeMem);
    And(a = true, b = writeMem, out = writeM);
    And16(a = true, b = aReg, out[0..14] = addressM);




}

